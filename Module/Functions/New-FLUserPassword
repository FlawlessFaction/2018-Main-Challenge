function New-FLUserPassword {
    [CmdletBinding(SupportsShouldProcess = $true)]
    [OutputType([System.Security.SecureString])]
    # Password must meet complexity requirements
    # https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2008-R2-and-2008/hh994562(v%3dws.10)
    param (
        [Parameter(Mandatory = $true)]
        [ValidateScript( {$Psitem -ge [int]10} )]
        [int]$Length,

        [Parameter(Mandatory = $true)]
        [ValidateScript( {$Psitem -ge [int]1} )]
        [int]$NumberOfSpecialCharacters,

        [Parameter(Mandatory = $true)]
        [string]$SamAccountName,

        [Parameter(Mandatory = $true)]
        [String]$DisplayName
    )

    begin {
        try {
            Write-Verbose "Loading System.Web namespace"
            Add-Type -AssemblyName System.web
        }
        catch {
            throw "Unable to load System.Web namespace containing required [System.Web.Security.Membership]::GeneratePassword method"
        }

        if (($Length - $NumberOfSpecialCharacters) -lt 2) {
            Throw "Too many special characters for requested length. Complexity cannot be acheived"
        }

        try {
            Write-Verbose "Checking AD Default Domain Password Policy"
            $AdDefaultDomainPasswordPolicy = Get-ADDefaultDomainPasswordPolicy -ErrorAction Stop
        }
        catch {
            Write-Warning "Unable to confirm specified Length: $Length meets the default domain password policy requirements"
        }
        if ($AdDefaultDomainPasswordPolicy) {
            if ($AdDefaultDomainPasswordPolicy.MinPasswordLength -gt $Length) {
                throw "Length: $Length does not meet the required length of AD Policy: $($ADDefaultDomainPasswordPolicy.MinPasswordLength)"
            }
            else {

                Write-Verbose "Confirmed specifed Length: $Length meets the AD Default Password MinPasswordlength: $($AdDefaultDomainPasswordPolicy.MinPasswordLength)"

            }
        }
    }
    process {
        #region  Create Name array from DisplayName removing any special characters
        Write-Verbose "Create Name array from DisplayName"
        $SplitDisplayName = $displayName.Split(" ")
        $testNames = @()
        foreach ($name in $SplitDisplayName) {
            Write-Verbose "Splitting $name into characters"
            $SplitName = $name.ToCharArray()
            foreach ($character in $SplitName) {
                if (-not ([System.Char]::IsLetterOrDigit($character))) {
                    Write-Verbose "Removing $character"
                    $name = $name.replace("$character", "")
                }
            }
            if ($name.length -ge 2) {
                Write-Verbose "Adding $name to testname array"
                $testNames += $name
            }
        }
        #endregion

        #region  Ensure password does not contain parts of the displayname or SamAccountName
        $pwdNotComplex = $true
        Write-Verbose "Testing Split DisplayNames"
        while ($pwdNotComplex) {
            $tempTest = @()
            $tempPWD = [System.Web.Security.Membership]::GeneratePassword($Length, $NumberOfSpecialCharacters)
            foreach ($testName in $testNames) {
                if ($SamAccountName.Length -gt 2) {
                    Write-Debug "Ensuring $tempPwd does not contain $testname or $SamAccountName "
                    Write-Verbose "Ensuring password does not contain $testname or $SamAccountName "
                    if (($tempPWD -like "*$testname*") -or ($tempPWD -like "*$SamAccountName*")) {
                        $tempTest += $true
                    }
                    else {
                        $tempTest += $false
                    }
                }
                else {
                    Write-Debug "Ensuring $tempPwd does not contain $testname"
                    Write-Verbose "Ensuring pasword does not contain $testname"
                    if ($tempPWD -like "*$testname*") {
                        $tempTest += $true
                    }
                    else {
                        $tempTest += $false
                    }

                }
            }
            #endregion

            #region testing character group complexity
            $groupTest = @()
            $groupTest += $tempPWD -cmatch "[A-Z]"
            $groupTest += $tempPWD -cmatch "[a-z]"
            $groupTest += $tempPWD -match "[0-9]"
            # Not tesing special characters because GeneratePassword method guarantees it
            $groupCount = ($groupTest |Group-Object |Where-Object name -eq $true).count
            Write-Debug "Ensuring $tempPWD contains at least 3 of 4 character groups"
            Write-Verbose "Ensuring password contains at least 3 of 4 character groups"
            Write-Verbose " $($groupCount + 1) of 4 character groups found"
            if ($groupCount -lt 2) {
                $tempTest += $true
            }
            #endregion
            if ($tempTest -contains $true) {
                $pwdNotComplex = $true
            }
            else {
                $pwdNotComplex = $false
            }
        }
        Write-Debug $tempPWD
        $securePwd = New-Object System.Security.SecureString
        $pwdCharArray = $tempPWD.ToCharArray()
        foreach ($char in $pwdCharArray) {
            $securePwd.AppendChar($char)
        }

        if ($PSCmdlet.ShouldProcess("New Password")) {
            return $securePwd
        }
    }
    end {}
}
